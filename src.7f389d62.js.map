{"version":3,"sources":["src/settings.js","src/partials/board.js","src/partials/paddle.js","src/partials/ball.js","src/partials/score.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","PADDLE_WIDTH","PADDLE_HEIGHT","BOARD_GAP","SPEED","RADIUS","TEXT_SIZE","KEYS","p1up","p1down","p2up","p2down","pause","Board","width","height","svg","rect","document","createElementNS","setAttributeNS","appendChild","line","Paddle","boardHeight","paddleWidth","paddleHeight","intialX","intialY","keyUp","keyDown","x","y","score","speed","addEventListener","event","key","moveUp","moveDown","Math","max","min","walls","left","top","right","bottom","Ball","boardWidth","radius","direction","ping","Audio","audioFile","color","reset","vx","vy","floor","random","abs","hitsTop","hitsBottom","player1","player2","increaseScore","getScore","p2","getCoordinates","play","p1","circle","wallCollision","goalCollision","paddleCollision","Score","xPosition","yPosition","text","textContent","Game","element","paused","gameElement","getElementById","board","boardMid","paddle1","paddle2Gap","paddle2","ball","ball2","score1","score2","innerHTML","render","alert","game","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.7f389d62.js","sourceRoot":"..","sourcesContent":["export const SVG_NS = \"http://www.w3.org/2000/svg\";\r\n\r\nexport const PADDLE_WIDTH = 8, \r\n             PADDLE_HEIGHT = 56, \r\n             BOARD_GAP = 10,\r\n             SPEED = 10,\r\n             RADIUS = 8,\r\n             TEXT_SIZE = 40;\r\n\r\nexport const KEYS = {\r\n    p1up: 'w',\r\n    p1down: 's',\r\n    p2up: 'ArrowUp',\r\n    p2down: 'ArrowDown',\r\n    pause: ' '\r\n};","import { SVG_NS } from '../settings';\r\n\r\nexport default class Board {\r\n  constructor(width, height) {\r\n      this.width = width;\r\n      this.height = height;\r\n      \r\n  }\r\n  render(svg) {\r\n     let rect = document.createElementNS(SVG_NS, 'rect');\r\n     rect.setAttributeNS(null, \"width\", this.width);\r\n     rect.setAttributeNS(null, \"height\", this.height);\r\n     rect.setAttributeNS(null, \"fill\", \"#353535\");\r\n     rect.setAttributeNS(null, \"x\", 0);\r\n     rect.setAttributeNS(null, \"y\", 0);\r\n     svg.appendChild(rect);\r\n     let line = document.createElementNS(SVG_NS, 'line')\r\n     line. setAttributeNS(null, \"x1\", this.width/2);\r\n     line. setAttributeNS(null, \"y1\", 0);\r\n     line. setAttributeNS(null, \"x2\", this.width/2);\r\n     line. setAttributeNS(null, \"y2\", this.height);\r\n     line. setAttributeNS(null, \"stroke\", \"white\");\r\n     line. setAttributeNS(null, \"stroke-width\", 4);\r\n     line. setAttributeNS(null, \"stroke-dasharray\", \"20 15\");\r\n     svg.appendChild(line);\r\n     \r\n\r\n  }\r\n}\r\n\r\n","import { SVG_NS, SPEED } from '../settings';\r\n\r\n\r\nexport default class Paddle {\r\n    constructor(boardHeight, paddleWidth, paddleHeight, intialX, intialY, keyUp, keyDown) {\r\n        this.boardHeight = boardHeight;\r\n        this.paddleWidth = paddleWidth;\r\n        this.paddleHeight = paddleHeight;\r\n        this.x = intialX;\r\n        this.y = intialY;\r\n        this.score = 0;\r\n        this.speed = SPEED;\r\n        \r\n        \r\n        document.addEventListener(\"keydown\", event => {\r\n            switch(event.key){\r\n                case keyUp:\r\n                this.moveUp();\r\n                break;\r\n                case keyDown:\r\n                this.moveDown();\r\n                break;\r\n\r\n            }\r\n        });\r\n    }\r\n        increaseScore(){\r\n            this.score++ \r\n            this.paddleHeight-=2;\r\n        } \r\n\r\n        getScore() {\r\n            return this.score;\r\n        }\r\n\r\n\r\n    moveUp() {\r\n        this.y = Math.max(0, this.y - this.speed);\r\n    }\r\n\r\n    moveDown() {\r\n        this.y = Math.min(this.boardHeight - this.paddleHeight, this.y + this.speed);\r\n    }\r\n    \r\ngetCoordinates(){\r\n    const walls = {\r\n        left: this.x,\r\n        top: this.y,\r\n        right: this.x + this.paddleWidth,\r\n        bottom: this.y + this.paddleHeight\r\n    };\r\n    return walls;\r\n}\r\nrender(svg) {\r\n    let rect = document.createElementNS(SVG_NS, 'rect');\r\n    rect.setAttributeNS(null, \"width\", this.paddleWidth);\r\n    rect.setAttributeNS(null, \"height\", this.paddleHeight);\r\n    rect.setAttributeNS(null, \"fill\", \"#fff\");\r\n    rect.setAttributeNS(null, \"x\", this.x);\r\n    rect.setAttributeNS(null, \"y\", this.y);\r\n    svg.appendChild(rect);\r\n}\r\n}","import { SVG_NS } from '../settings';\r\nimport audioFile from '../../public/sounds/pong-01.wav'; \r\n\r\nexport default class Ball {\r\n    constructor(boardWidth, boardHeight, radius) {\r\n        this.boardWidth = boardWidth;\r\n        this.boardHeight = boardHeight;\r\n        this.radius = radius;\r\n        this.direction = 1;\r\n        this.ping = new Audio(audioFile);\r\n        this.color = \"white\";\r\n        this.reset();\r\n    }\r\n\r\n\r\n    reset() {\r\n        this.x = this.boardWidth/2;\r\n        this.y = this.boardHeight/2;\r\n        this.vx = 0;   \r\n        this.vy = 0;\r\n        while (this.vy === 0){\r\n            this.vy = Math.floor(Math.random() * 10 - 5);\r\n        }\r\n        this.vx = this.direction * (6 - Math.abs(this.vy));\r\n    }\r\n\r\n    wallCollision(){\r\n        const hitsTop = this.y - this.radius <= 0;\r\n        const hitsBottom = this.y + this.radius >= this.boardHeight;\r\n        if (hitsTop || hitsBottom) {\r\n            this.vy = this.vy * -1;\r\n        }\r\n\r\n    }\r\n\r\n     goalCollision(player1, player2) {\r\n         if (this.x <= 0){\r\n             player2.increaseScore();\r\n             this.direction = this.direction * -1;\r\n             if (player2.getScore() >= 2) {\r\n                 this.color = 'red';}\r\n             if (player2.getScore() >= 4) {\r\n                    this.color = 'green';}   \r\n             this.reset();\r\n         }else if (this.x >= this.boardWidth) {\r\n             player1.increaseScore();\r\n             this.direction = this.direction * -1;\r\n             if (player2.getScore() >= 2) {\r\n                this.color = 'red';}\r\n             if (player2.getScore() >= 4) {\r\n                    this.color = 'green';}  \r\n             this.reset();\r\n         }\r\n         }\r\n    \r\n\r\n    paddleCollision(player1, player2){\r\n\r\n          if (this.vx > 0){\r\n                const p2  = player2.getCoordinates();\r\n                if (this.x + this.radius >= p2.left &&\r\n                    this.y  >= p2.top &&\r\n                    this.y  <= p2.bottom) {\r\n                    this.vx = this.vx * -1;\r\n                    this.ping.play();\r\n                    this.color = 'yellow';\r\n                    }\r\n        \r\n          } else {\r\n              const p1 = player1.getCoordinates();\r\n          if (this.x - this.radius <= p1.right &&\r\n              this.y >= p1.top &&\r\n              this.y <= p1.bottom) {\r\n                  this.vx = this.vx * -1;\r\n                  this.ping.play();\r\n                  this.color = 'blue';\r\n                 \r\n                  \r\n              }\r\n       \r\n            }\r\n        }\r\n\r\n    render(svg, player1, player2) {\r\n        let circle = document.createElementNS(SVG_NS, 'circle');\r\n        circle.setAttributeNS(null, \"fill\", this.color);\r\n        circle.setAttributeNS(null, \"cx\", this.x);\r\n        circle.setAttributeNS(null, \"cy\", this.y);\r\n        circle.setAttributeNS(null, \"r\", this.radius);\r\n        this.x = this.x + this.vx;\r\n        this.y = this.y + this.vy;\r\n        this.wallCollision();\r\n        this.goalCollision(player1, player2)\r\n        this.paddleCollision(player1, player2)\r\n        svg.appendChild(circle);\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n","import { SVG_NS, TEXT_SIZE} from '../settings'\r\n\r\nexport default class Score {\r\n    constructor(xPosition, yPosition){\r\n        this.x = xPosition;\r\n        this.y = yPosition;\r\n    }\r\n\r\nrender(svg, score) {\r\n    let text = document.createElementNS(SVG_NS, 'text');\r\n    text.setAttributeNS(null, \"height\", this.height);\r\n    text.setAttributeNS(null, \"fill\", \"white\");\r\n    text.setAttributeNS(null, \"font-size\", TEXT_SIZE);\r\n    text.setAttributeNS(null, \"font-family\", '\"Silkscreen Web\", monotype');\r\n    text.setAttributeNS(null, \"x\", this.x);\r\n    text.setAttributeNS(null, \"y\", this.y);\r\n    text.textContent = score;\r\n    svg.appendChild(text);\r\n}\r\n}","import { SVG_NS, PADDLE_WIDTH, PADDLE_HEIGHT, BOARD_GAP, KEYS, RADIUS } from '../settings';\nimport Board from './board';\nimport Paddle from './paddle';\nimport Ball from './ball';\nimport Score from './score';\n\nexport default class Game {\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n    this.paused = false;\n    this.gameElement = document.getElementById(this.element);\n    this.board = new Board(this.width, this.height);\n    const boardMid = (this.height - PADDLE_HEIGHT) / 2;\n    this.paddle1 = new Paddle(this.height, PADDLE_WIDTH, PADDLE_HEIGHT, BOARD_GAP, boardMid, KEYS.p1up, KEYS.p1down);\n    const paddle2Gap = this.width - BOARD_GAP - PADDLE_WIDTH;\n    this.paddle2 = new Paddle(this.height, PADDLE_WIDTH, PADDLE_HEIGHT, paddle2Gap, boardMid, KEYS.p2up, KEYS.p2down);\n    this.ball = new Ball(this.width, this.height, RADIUS);\n    this.ball2 = new Ball(this.width, this.height, RADIUS);\n    this.score1 = new Score(this.width/2 - 50, 30);\n    this.score2 = new Score(this.width/2 + 50, 30);\n\n    document.addEventListener(\"keydown\", (event) =>{\n      if(event.key === KEYS.pause) {\n        this.paused = !this.paused;\n      }\n    });\n  \n\t\t// Other code goes here...\n  }\n\n  render() {\n    if (this.paused) {\n      return;\n    }\n\n    this.gameElement.innerHTML = '';\n    let svg = document.createElementNS(SVG_NS, 'svg');\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg);\n    this.board.render(svg);\n    this.paddle1.render(svg);\n    this.paddle2.render(svg);\n    this.ball.render(svg, this.paddle1, this.paddle2);\n   \n    this.score1.render(svg, this.paddle1.getScore());\n    this.score2.render(svg, this.paddle2.getScore());\n    \n    if (this.paddle1.getScore() === 15 || this.paddle2.getScore() === 15){\n      alert('winner!');\n      this.paused = true;\n    }\n\n    if  (this.paddle1.getScore() >= 6 || this.paddle2.getScore() >= 6){ \n      this.ball2.render(svg, this.paddle1, this.paddle2);\n     \n    }\n\n  }\n}\n","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 512, 256);\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}